apiVersion: apps/v1
kind: Deployment
metadata:
  name: apigateway
  namespace: {{ .Release.Namespace }}
  labels:
    tier: frontend
    app: apigateway
spec:
  selector:
    matchLabels:
      app: apigateway
  replicas: 1
  template:
    metadata:
      labels:
        app: apigateway
        run: apigateway
    spec:
      hostname: apigateway
      restartPolicy: Always
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "apigateway.tls.ai"
      nodeSelector:
        mode: "backend"
      imagePullSecrets:
        - name: imagepullsecret
      containers:
      - name: apigateway
        image: "{{ .Values.global.images.apigateway }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default "IfNotPresent" }}
        ports:
        - containerPort: 9443
        readinessProbe:
          tcpSocket:
            port: 9443
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 2
          failureThreshold: 10
        volumeMounts:
        - name: gateway-logs
          mountPath: "/var/www/html/gateway-logs"
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        - name: tls-ai-cert-volume
          mountPath: "/usr/local/share/ca-certificates/tls.ai/"
          readOnly: true
        - name: cluster-local-cert-volume
          mountPath: "/usr/local/share/ca-certificates/cluster.local/"
          readOnly: true
        - name: apigateway-keys
          mountPath: "/home/user/api-gateway/config/keys"
          readOnly: false
        - name: apigateway-volume
          mountPath: "/var/www/html"
          readOnly: false
        envFrom:
        - configMapRef:
            name: apigateway-env
        - configMapRef:
            name: global-env
        env:
        - name: REDIS_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password
        - name: CONSUL_AGENT
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: CONSUL_SERVER
          value: $(CONSUL_AGENT)
      - name: redis
        image: "{{ .Values.global.images.redis }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default "IfNotPresent" }}
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-db-data
          mountPath: "/data"
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        env:
        - name: REDIS_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: CONSUL_AGENT
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: CONSUL_SERVER
          value: $(CONSUL_AGENT)
      {{- if .Values.enableProxy }}
      - name: danteproxy
        image: "{{ .Values.global.images.danteproxy }}"
        imagePullPolicy: {{ .Values.global.pullPolicy | default "IfNotPresent" }}
        ports:
        - containerPort: 1080
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        envFrom:
        - configMapRef:
            name: global-env
        env:
        - name: CONSUL_AGENT
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: CONSUL_SERVER
          value: $(CONSUL_AGENT)
      {{- end }}
      volumes:
      - name: gateway-logs
        hostPath:
           path: /storage/gateway-logs
           type: DirectoryOrCreate
      - name: redis-db-data
        hostPath:
           path: /ssd/redis_db_data
           type: DirectoryOrCreate
      - name: apigateway-keys
        hostPath:
           path: /ssd/apigateway/keys
           type: DirectoryOrCreate
      - name: apigateway-volume
        hostPath:
           path: /storage
           type: DirectoryOrCreate
      - name: tls-ai-cert-volume
        secret:
          secretName: tls-ai-cert
      - name: cluster-local-cert-volume
        secret:
          secretName: cluster-local-cert
      - name: tz-config
        hostPath:
           path: /etc/localtime
           type: File
